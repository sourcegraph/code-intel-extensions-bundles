parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"N2iK":[function(require,module,exports) {
var global = arguments[3];
var r=arguments[3];module.exports=r.require("sourcegraph");
},{}],"C7Gc":[function(require,module,exports) {
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.activate=a;var e=n(require("sourcegraph"));function t(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return t=function(){return e},e}function n(e){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=t();if(n&&n.has(e))return n.get(e);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var s=a?Object.getOwnPropertyDescriptor(e,o):null;s&&(s.get||s.set)?Object.defineProperty(r,o,s):r[o]=e[o]}return r.default=e,n&&n.set(e,r),r}const r=["literal","regexp","structural"];function a(t){t.subscriptions.add(e.commands.registerCommand("searchExport.exportSearchResultsToCSV",async(t,n)=>{var a,o;const i=e.configuration.get().value["searchExport.searchPatternType"],c=r.includes(n)?n:i&&r.includes(i)?i:"literal",{data:l,errors:u}=await e.commands.executeCommand("queryGraphQL","\n                query SearchResults($query: String!, $patternType: SearchPatternType) {\n                    search(query: $query, patternType: $patternType) {\n                        results {\n                            results {\n                                __typename\n                                ... on CommitSearchResult {\n                                      url\n                                      commit {\n                                        subject\n                                        author {\n                                          date\n                                          person {\n                                            displayName\n                                          }\n                                        }\n                                    }\n                                }\n                                ... on Repository {\n                                    name\n                                    externalURLs {\n                                        url\n                                    }\n                                }\n                                ... on FileMatch {\n                                    repository {\n                                        name\n                                        externalURLs {\n                                            url\n                                        }\n                                    }\n                                    file {\n                                        path\n                                        canonicalURL\n                                        externalURLs {\n                                            url\n                                        }\n                                    }\n                                    lineMatches {\n                                        preview\n                                        offsetAndLengths\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                ",{query:t,patternType:c});if(u)throw new Error(`Search error: ${u.map(e=>e.message).join(",")}`);const p=l.search.results.results;if(!(null===(a=p)||void 0===a?void 0:a.length)||!p[0])throw new Error("No results to be exported.");const h=["CommitSearchResult"!==p[0].__typename?["Match type","Repository","Repository external URL","File path","File URL","File external URL","Search matches"]:["Date","Author","Subject","Commit URL"],...p.map(t=>{var n,r,a;switch(t.__typename){case"FileMatch":const o=t.lineMatches.map(e=>e.offsetAndLengths.map(t=>{var n;return null===(n=e.preview)||void 0===n?void 0:n.substring(t[0],t[0]+t[1])}).join(" ")).join(" ");return[t.__typename,t.repository.name,null===(n=t.repository.externalURLs[0])||void 0===n?void 0:n.url,t.file.path,new URL(t.file.canonicalURL,e.internal.sourcegraphURL).toString(),null===(r=t.file.externalURLs[0])||void 0===r?void 0:r.url,s(o)].map(e=>JSON.stringify(e));case"Repository":return[t.__typename,t.name,null===(a=t.externalURLs[0])||void 0===a?void 0:a.url].map(e=>JSON.stringify(e));case"CommitSearchResult":return[t.commit.author.date,t.commit.author.person.displayName,t.commit.subject,t.url].map(e=>JSON.stringify(e));default:throw new Error("Please try another query.")}})],m=encodeURIComponent(h.map(e=>e.join(",")).join("\n")),y=`sourcegraph-search-export-${t.replace(/[^\w]/g,"-")}.csv`;null===(o=e.app.activeWindow)||void 0===o||o.showNotification(`Search results export is complete.\n\n<a href="data:text/csv;charset=utf-8,${m}" download="${y}"><strong>Download CSV</strong></a>`,e.NotificationType.Success)}))}const o=200;function s(t){let n=e.configuration.get().value["searchExport.maxMatchContentLength"];return("number"!=typeof n||n<0)&&(n=o),t.length>n?`${t.slice(0,n)}...`:t}
},{"sourcegraph":"N2iK"}]},{},["C7Gc"], null)